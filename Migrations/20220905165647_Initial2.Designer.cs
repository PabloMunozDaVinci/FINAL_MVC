// <auto-generated />
using System;
using FINAL_MVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FINAL_MVC.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220905165647_Initial2")]
    partial class Initial2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FINAL_MVC.Models.Comentario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("varchar(350)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("DateTime");

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PostID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Comentario", (string)null);
                });

            modelBuilder.Entity("FINAL_MVC.Models.Post", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("varchar(350)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Post", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Contenido = "111",
                            Fecha = new DateTime(2022, 9, 5, 13, 56, 46, 556, DateTimeKind.Local).AddTicks(8698),
                            UsuarioID = 2
                        },
                        new
                        {
                            ID = 2,
                            Contenido = "222",
                            Fecha = new DateTime(2022, 9, 5, 13, 56, 46, 556, DateTimeKind.Local).AddTicks(8698),
                            UsuarioID = 3
                        },
                        new
                        {
                            ID = 3,
                            Contenido = "333",
                            Fecha = new DateTime(2022, 9, 5, 13, 56, 46, 556, DateTimeKind.Local).AddTicks(8698),
                            UsuarioID = 2
                        },
                        new
                        {
                            ID = 4,
                            Contenido = "444",
                            Fecha = new DateTime(2022, 9, 5, 13, 56, 46, 556, DateTimeKind.Local).AddTicks(8698),
                            UsuarioID = 3
                        },
                        new
                        {
                            ID = 5,
                            Contenido = "555",
                            Fecha = new DateTime(2022, 9, 5, 13, 56, 46, 556, DateTimeKind.Local).AddTicks(8698),
                            UsuarioID = 2
                        });
                });

            modelBuilder.Entity("FINAL_MVC.Models.Reaccion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PostID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Reaccion", (string)null);
                });

            modelBuilder.Entity("FINAL_MVC.Models.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Palabra")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("ID");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("FINAL_MVC.Models.TagPost", b =>
                {
                    b.Property<int>("ID_Tag")
                        .HasColumnType("int");

                    b.Property<int?>("ID_Post")
                        .HasColumnType("int");

                    b.Property<DateTime>("UltimaActualizacion")
                        .HasColumnType("datetime2");

                    b.HasKey("ID_Tag", "ID_Post");

                    b.HasIndex("ID_Post");

                    b.ToTable("TagPost");
                });

            modelBuilder.Entity("FINAL_MVC.Models.Usuario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Bloqueado")
                        .HasColumnType("bit");

                    b.Property<bool>("EsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Usuarios", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Apellido = "adminApellido",
                            Bloqueado = false,
                            EsAdmin = true,
                            Mail = "administrador@gmail.com",
                            Nombre = "administrador",
                            Password = "administrador"
                        },
                        new
                        {
                            ID = 2,
                            Apellido = "usuario1Apellido",
                            Bloqueado = false,
                            EsAdmin = false,
                            Mail = "usuario1@gmail.com",
                            Nombre = "usuario1",
                            Password = "usuario1"
                        },
                        new
                        {
                            ID = 3,
                            Apellido = "usuario2Apellido",
                            Bloqueado = false,
                            EsAdmin = false,
                            Mail = "usuario2@gmail.com",
                            Nombre = "usuario2",
                            Password = "usuario2"
                        });
                });

            modelBuilder.Entity("FINAL_MVC.Models.UsuarioAmigo", b =>
                {
                    b.Property<int>("ID_Usuario")
                        .HasColumnType("int");

                    b.Property<int>("ID_Amigo")
                        .HasColumnType("int");

                    b.HasKey("ID_Usuario", "ID_Amigo");

                    b.HasIndex("ID_Amigo");

                    b.ToTable("UsuarioAmigo");
                });

            modelBuilder.Entity("FINAL_MVC.Models.Comentario", b =>
                {
                    b.HasOne("FINAL_MVC.Models.Post", "Post")
                        .WithMany("Comentarios")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FINAL_MVC.Models.Usuario", "Usuario")
                        .WithMany("MisComentarios")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FINAL_MVC.Models.Post", b =>
                {
                    b.HasOne("FINAL_MVC.Models.Usuario", "Usuario")
                        .WithMany("MisPosts")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FINAL_MVC.Models.Reaccion", b =>
                {
                    b.HasOne("FINAL_MVC.Models.Post", "Post")
                        .WithMany("Reacciones")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FINAL_MVC.Models.Usuario", "Usuario")
                        .WithMany("MisReacciones")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FINAL_MVC.Models.TagPost", b =>
                {
                    b.HasOne("FINAL_MVC.Models.Post", "Post")
                        .WithMany("TagPost")
                        .HasForeignKey("ID_Post")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FINAL_MVC.Models.Tag", "Tag")
                        .WithMany("TagPost")
                        .HasForeignKey("ID_Tag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("FINAL_MVC.Models.UsuarioAmigo", b =>
                {
                    b.HasOne("FINAL_MVC.Models.Usuario", "Amigo")
                        .WithMany("AmigosMios")
                        .HasForeignKey("ID_Amigo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FINAL_MVC.Models.Usuario", "Usuario")
                        .WithMany("MisAmigos")
                        .HasForeignKey("ID_Usuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Amigo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FINAL_MVC.Models.Post", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("Reacciones");

                    b.Navigation("TagPost");
                });

            modelBuilder.Entity("FINAL_MVC.Models.Tag", b =>
                {
                    b.Navigation("TagPost");
                });

            modelBuilder.Entity("FINAL_MVC.Models.Usuario", b =>
                {
                    b.Navigation("AmigosMios");

                    b.Navigation("MisAmigos");

                    b.Navigation("MisComentarios");

                    b.Navigation("MisPosts");

                    b.Navigation("MisReacciones");
                });
#pragma warning restore 612, 618
        }
    }
}
